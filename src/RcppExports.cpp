// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// connect
SEXP connect(Rcpp::Nullable<Rcpp::CharacterVector> database_, Rcpp::Nullable<Rcpp::CharacterVector> aliases_);
RcppExport SEXP _RHyper_connect(SEXP database_SEXP, SEXP aliases_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type database_(database_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type aliases_(aliases_SEXP);
    rcpp_result_gen = Rcpp::wrap(connect(database_, aliases_));
    return rcpp_result_gen;
END_RCPP
}
// disconnect
void disconnect(SEXP connection_ptr);
RcppExport SEXP _RHyper_disconnect(SEXP connection_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type connection_ptr(connection_ptrSEXP);
    disconnect(connection_ptr);
    return R_NilValue;
END_RCPP
}
// execute_command
void execute_command(SEXP conn_, SEXP statement_);
RcppExport SEXP _RHyper_execute_command(SEXP conn_SEXP, SEXP statement_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn_(conn_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type statement_(statement_SEXP);
    execute_command(conn_, statement_);
    return R_NilValue;
END_RCPP
}
// is_valid_connection
bool is_valid_connection(SEXP conn_);
RcppExport SEXP _RHyper_is_valid_connection(SEXP conn_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn_(conn_SEXP);
    rcpp_result_gen = Rcpp::wrap(is_valid_connection(conn_));
    return rcpp_result_gen;
END_RCPP
}
// file_name_impl
SEXP file_name_impl(SEXP path_);
RcppExport SEXP _RHyper_file_name_impl(SEXP path_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type path_(path_SEXP);
    rcpp_result_gen = Rcpp::wrap(file_name_impl(path_));
    return rcpp_result_gen;
END_RCPP
}
// create_result2
SEXP create_result2(SEXP conn_, SEXP statement_);
RcppExport SEXP _RHyper_create_result2(SEXP conn_SEXP, SEXP statement_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn_(conn_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type statement_(statement_SEXP);
    rcpp_result_gen = Rcpp::wrap(create_result2(conn_, statement_));
    return rcpp_result_gen;
END_RCPP
}
// clear_result2
void clear_result2(SEXP res_);
RcppExport SEXP _RHyper_clear_result2(SEXP res_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    clear_result2(res_);
    return R_NilValue;
END_RCPP
}
// fetch_rows
Rcpp::List fetch_rows(SEXP res_, Rcpp::Nullable<int> n_);
RcppExport SEXP _RHyper_fetch_rows(SEXP res_SEXP, SEXP n_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type n_(n_SEXP);
    rcpp_result_gen = Rcpp::wrap(fetch_rows(res_, n_));
    return rcpp_result_gen;
END_RCPP
}
// has_completed2
SEXP has_completed2(SEXP res_);
RcppExport SEXP _RHyper_has_completed2(SEXP res_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    rcpp_result_gen = Rcpp::wrap(has_completed2(res_));
    return rcpp_result_gen;
END_RCPP
}
// is_valid_result
bool is_valid_result(SEXP res_);
RcppExport SEXP _RHyper_is_valid_result(SEXP res_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    rcpp_result_gen = Rcpp::wrap(is_valid_result(res_));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_RHyper_connect", (DL_FUNC) &_RHyper_connect, 2},
    {"_RHyper_disconnect", (DL_FUNC) &_RHyper_disconnect, 1},
    {"_RHyper_execute_command", (DL_FUNC) &_RHyper_execute_command, 2},
    {"_RHyper_is_valid_connection", (DL_FUNC) &_RHyper_is_valid_connection, 1},
    {"_RHyper_file_name_impl", (DL_FUNC) &_RHyper_file_name_impl, 1},
    {"_RHyper_create_result2", (DL_FUNC) &_RHyper_create_result2, 2},
    {"_RHyper_clear_result2", (DL_FUNC) &_RHyper_clear_result2, 1},
    {"_RHyper_fetch_rows", (DL_FUNC) &_RHyper_fetch_rows, 2},
    {"_RHyper_has_completed2", (DL_FUNC) &_RHyper_has_completed2, 1},
    {"_RHyper_is_valid_result", (DL_FUNC) &_RHyper_is_valid_result, 1},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RHyper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
